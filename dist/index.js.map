{"version":3,"file":"index.js","names":["oauthAccessToken: string | null","refreshToken: string | null","tokenExpiresTimeout: NodeJS.Timeout | null","refreshToken"],"sources":["../src/server.ts","../src/index.ts"],"sourcesContent":["import http, { IncomingMessage, ServerResponse } from \"node:http\";\r\nimport https from \"node:https\";\r\nimport crypto from \"node:crypto\";\r\nimport { config } from \"./config.ts\";\r\nimport { getFolderPath, setVbrickAccessToken } from \"./vbrickUtilities.ts\";\r\nimport fs from \"node:fs\";\r\nimport path from \"node:path\";\r\nimport { fileURLToPath } from 'node:url';\r\n\r\nconst __filename = fileURLToPath(import.meta.url);\r\nconst __dirname = path.dirname(__filename);\r\n\r\nconst REDIRECT_URI = `http://localhost:${config.oauth.port}/oauth/callback`;\r\n\r\nlet oauthAccessToken: string | null = null;\r\nlet refreshToken: string | null = null;\r\nlet tokenExpiresTimeout: NodeJS.Timeout | null = null;\r\n\r\nasync function startOAuthHandler() {\r\n\tconst server = http.createServer(async (req, res) => {\r\n\t\ttry {\r\n\t\t\tconst parsedUrl = new URL(req.url || \"http://localhost\", `http://${req.headers.host || \"localhost\"}`);\r\n\t\t\tif (isLoginRequest(parsedUrl, req)) return await showLoginLink(res);\r\n\t\t\tif (isCallbackRequest(parsedUrl, req)) return handleCallback(req, res, parsedUrl);\r\n\t\t\treturn handleNotFound(res);\r\n\t\t} catch (err) {\r\n\t\t\thandleServerError(res, err);\r\n\t\t}\r\n\t});\r\n\r\n\tstartListening(server);\r\n}\r\n\r\nfunction startListening(server: http.Server) {\r\n\tconst port = config.oauth.port;\r\n\tconst backupPort = config.oauth.backupPort;\r\n\tlet listenPort = port;\r\n\r\n\tfunction onListen(p: number) {\r\n\t\tconsole.warn(`OAuth2 server listening on port ${p}`);\r\n\t}\r\n\r\n\tfunction onError(err: any) {\r\n\t\tif (err.code === 'EADDRINUSE' && listenPort !== backupPort) {\r\n\t\t\tconsole.warn(`Port ${port} in use, trying backup port ${backupPort}...`);\r\n\t\t\tserver.close(() => {\r\n\t\t\t\tlistenPort = backupPort;\r\n\t\t\t\tserver.listen(backupPort, () => onListen(backupPort));\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\tif (err.code === 'EADDRINUSE') {\r\n\t\t\t\tconsole.error(`Both primary port ${port} and backup port ${backupPort} are in use. Exiting.`);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tconsole.error('OAuth2 server error:', err);\r\n\t\t\t}\r\n\t\t\tprocess.exit(1);\r\n\t\t}\r\n\t}\r\n\r\n\tserver.on('error', onError);\r\n\r\n\tfunction shutdownServer() {\r\n\t\tserver.close(() => {\r\n\t\t\tconsole.warn(\"OAuth2 server stopped.\");\r\n\t\t});\r\n\t}\r\n\tprocess.on(\"SIGINT\", shutdownServer);\r\n\tprocess.on(\"SIGTERM\", shutdownServer);\r\n\r\n\tserver.listen(port, () => onListen(port));\r\n}\r\n\r\nasync function showLoginLink(res: ServerResponse): Promise<void> {\r\n\tconst codeVerifier = generateCodeVerifier();\r\n\tconst codeChallenge = generateCodeChallenge(codeVerifier);\r\n\r\n\tres.setHeader('Set-Cookie', `code_verifier=${codeVerifier}; Path=/; HttpOnly`);\r\n\tconst responseType = \"response_type=code\";\r\n\tconst client_id = `client_id=${encodeURIComponent(config.oauth.clientId)}`;\r\n\tconst redirect_uri = `redirect_uri=${encodeURIComponent(REDIRECT_URI)}`;\r\n\tconst code_challenge = `code_challenge=${encodeURIComponent(codeChallenge)}`;\r\n\tconst code_challenge_method = `code_challenge_method=S256`;\r\n\tconst loginUrl = `${config.vbrickRevTenantUrl}/api/v2/oauth2/authorize?${responseType}&${client_id}&${redirect_uri}&${code_challenge}&${code_challenge_method}`;\r\n\r\n\tconst html = (await getHtmlTemplate(\"redirect.html\")).replace(/\\{\\{LOGIN_URL\\}\\}/g, loginUrl);\r\n\tres.writeHead(200, { \"Content-Type\": \"text/html\" });\r\n\tres.end(html);\r\n}\r\n\r\nfunction base64urlEncode(buffer: Buffer): string {\r\n\treturn buffer.toString(\"base64\")\r\n\t\t.replace(/\\+/g, \"-\")\r\n\t\t.replace(/\\//g, \"_\")\r\n\t\t.replace(/=+$/, \"\");\r\n}\r\n\r\nfunction generateCodeVerifier(): string {\r\n\treturn base64urlEncode(crypto.randomBytes(48));\r\n}\r\n\r\nfunction generateCodeChallenge(codeVerifier: string): string {\r\n\tconst hash = crypto.createHash(\"sha256\").update(codeVerifier).digest();\r\n\treturn base64urlEncode(hash);\r\n}\r\n\r\n\r\nfunction scheduleTokenRefresh(tokenJson: any, code: string, codeVerifier: string) {\r\n\tif (!tokenJson.refresh_token || !tokenJson.expires_in) return;\r\n\trefreshToken = tokenJson.refresh_token;\r\n\tconst expiresInMs = tokenJson.expires_in * 1000;\r\n\tif (tokenExpiresTimeout) clearTimeout(tokenExpiresTimeout);\r\n\ttokenExpiresTimeout = setTimeout(() => {\r\n\t\trefreshAccessToken(code, codeVerifier, refreshToken!);\r\n\t}, Math.max(expiresInMs - 10000, 1000)); // refresh 10s before expiry\r\n}\r\n\r\nfunction refreshAccessToken(code: string, codeVerifier: string, refreshToken: string) {\r\n\tconst tokenUrl = `${config.vbrickRevTenantUrl}/api/v2/oauth2/token`;\r\n\tconst postData = JSON.stringify({\r\n\t\tcode,\r\n\t\tclient_id: config.oauth.clientId,\r\n\t\tgrant_type: \"refresh_token\",\r\n\t\tredirect_uri: REDIRECT_URI,\r\n\t\trefresh_token: refreshToken,\r\n\t\tcode_verifier: codeVerifier\r\n\t});\r\n\tconst tokenUrlObj = new URL(tokenUrl);\r\n\tconst protocolPort = tokenUrlObj.protocol === \"https:\" ? 443 : 80;\r\n\tconst port = tokenUrlObj.port ? parseInt(tokenUrlObj.port) : protocolPort;\r\n\tconst options = {\r\n\t\thostname: tokenUrlObj.hostname,\r\n\t\tport: port,\r\n\t\tpath: \"/api/v2/oauth2/token\",\r\n\t\tmethod: \"POST\",\r\n\t\theaders: {\r\n\t\t\t\"Content-Type\": \"application/json\",\r\n\t\t\t\"Content-Length\": Buffer.byteLength(postData)\r\n\t\t}\r\n\t};\r\n\tconst protocol = tokenUrlObj.protocol === \"https:\" ? https : http;\r\n\tconst tokenReq = protocol.request(options, (tokenRes: IncomingMessage) => {\r\n\t\tlet data = \"\";\r\n\t\ttokenRes.on(\"data\", (chunk) => { data += chunk; });\r\n\t\ttokenRes.on(\"end\", () => {\r\n\t\t\tif (tokenRes.statusCode === 200) {\r\n\t\t\t\tlet tokenJson;\r\n\t\t\t\ttry {\r\n\t\t\t\t\ttokenJson = JSON.parse(data);\r\n\t\t\t\t\toauthAccessToken = tokenJson.access_token || null;\r\n\t\t\t\t\tsetVbrickAccessToken(oauthAccessToken || \"\");\r\n\t\t\t\t\tscheduleTokenRefresh(tokenJson, code, codeVerifier);\r\n\t\t\t\t\tconsole.warn(\"Token refreshed successfully.\", tokenJson);\r\n\t\t\t\t} catch (err) {\r\n\t\t\t\t\tconsole.error(\"Failed to parse refresh token response:\", err);\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tconsole.error(`Token refresh failed: ${data}`);\r\n\t\t\t}\r\n\t\t});\r\n\t});\r\n\ttokenReq.on(\"error\", (err: Error) => {\r\n\t\tconsole.error(\"Token refresh request error:\", err);\r\n\t});\r\n\ttokenReq.write(postData);\r\n\ttokenReq.end();\r\n}\r\n\r\nfunction isLoginRequest(parsedUrl: URL, req: http.IncomingMessage) {\r\n\treturn config.oauth?.enabled && parsedUrl.pathname === \"/\" && req.method === \"GET\";\r\n}\r\n\r\nfunction isCallbackRequest(parsedUrl: URL, req: http.IncomingMessage) {\r\n\treturn parsedUrl.pathname === \"/oauth/callback\" && req.method === \"GET\";\r\n}\r\n\r\nfunction handleCallback(req: http.IncomingMessage, res: ServerResponse, parsedUrl: URL) {\r\n\tconsole.warn(\"OAuth2 callback received\");\r\n\tconst code = parsedUrl.searchParams.get(\"code\")?.replace(/ /g, \"+\") || \"\";\r\n\r\n\tif (typeof code !== \"string\" || code.length === 0) {\r\n\t\tres.writeHead(400, { \"Content-Type\": \"text/plain\" });\r\n\t\tres.end(\"Missing code parameter.\");\r\n\t\treturn;\r\n\t}\r\n\t// Retrieve code_verifier from cookie using RegExp.exec()\r\n\tconst cookieHeader = req.headers[\"cookie\"] || \"\";\r\n\tconst codeVerifierMatch = /code_verifier=([^;]+)/.exec(cookieHeader);\r\n\tconst codeVerifier = codeVerifierMatch ? codeVerifierMatch[1] : null;\r\n\tif (!codeVerifier) {\r\n\t\tconsole.error(\"Missing code_verifier cookie.\");\r\n\t\tres.writeHead(400, { \"Content-Type\": \"text/plain\" });\r\n\t\tres.end(\"Missing code_verifier cookie.\");\r\n\t\treturn;\r\n\t}\r\n\texchangeToken(code, codeVerifier, res);\r\n}\r\n\r\nfunction handleNotFound(res: ServerResponse) {\r\n\tres.writeHead(404, { \"Content-Type\": \"text/plain\" });\r\n\tres.end(\"Not found.\");\r\n}\r\n\r\nfunction handleServerError(res: ServerResponse, err: any) {\r\n\tconsole.warn(err);\r\n\tres.writeHead(500, { \"Content-Type\": \"text/plain\" });\r\n\tres.end(\"Internal server error.\");\r\n\tconsole.error(\"Server error:\", err);\r\n}\r\n\r\nfunction exchangeToken(code: string, codeVerifier: string, res: ServerResponse) {\r\n\tconst tokenUrl = `${config.vbrickRevTenantUrl}/api/v2/oauth2/token`;\r\n\tconst postData = JSON.stringify({\r\n\t\tgrant_type: \"authorization_code\",\r\n\t\tcode,\r\n\t\tcode_verifier: codeVerifier,\r\n\t\tclient_id: config.oauth.clientId,\r\n\t\tredirect_uri: REDIRECT_URI\r\n\t});\r\n\tconst tokenUrlObj = new URL(tokenUrl);\r\n\tconst protocolPort = tokenUrlObj.protocol === \"https:\" ? 443 : 80;\r\n\tconst port = tokenUrlObj.port ? parseInt(tokenUrlObj.port) : protocolPort;\r\n\tconst options = {\r\n\t\thostname: tokenUrlObj.hostname,\r\n\t\tport: port,\r\n\t\tpath: \"/api/v2/oauth2/token\",\r\n\t\tmethod: \"POST\",\r\n\t\theaders: {\r\n\t\t\t\"Content-Type\": \"application/json\",\r\n\t\t\t\"Content-Length\": Buffer.byteLength(postData)\r\n\t\t}\r\n\t};\r\n\tconst protocol = tokenUrlObj.protocol === \"https:\" ? https : http;\r\n\tconst tokenReq = protocol.request(options, (tokenRes: IncomingMessage) => {\r\n\t\tlet data = \"\";\r\n\t\ttokenRes.on(\"data\", (chunk) => { data += chunk; });\r\n\t\ttokenRes.on(\"end\", async () => {\r\n\t\t\tif (tokenRes.statusCode === 200) {\r\n\t\t\t\tlet tokenJson;\r\n\t\t\t\ttry {\r\n\t\t\t\t\ttokenJson = JSON.parse(data);\r\n\t\t\t\t\toauthAccessToken = tokenJson.access_token || null;\r\n\t\t\t\t\tsetVbrickAccessToken(oauthAccessToken || \"\");\r\n\t\t\t\t\tscheduleTokenRefresh(tokenJson, code, codeVerifier);\r\n\t\t\t\t\tres.writeHead(200, { \"Content-Type\": \"text/html\" });\r\n\t\t\t\t\tres.end(await getHtmlTemplate(\"success.html\"));\r\n\t\t\t\t\tconsole.warn(\"OAuth2 access token set:\", oauthAccessToken);\r\n\t\t\t\t} catch (err) {\r\n\t\t\t\t\tconsole.error(\"Failed to parse token response:\", err);\r\n\t\t\t\t\tres.writeHead(500, { \"Content-Type\": \"text/plain\" });\r\n\t\t\t\t\tres.end(\"Failed to parse token response.\");\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tres.writeHead(tokenRes.statusCode || 500, { \"Content-Type\": \"text/plain\" });\r\n\t\t\t\tres.end(`Token exchange failed: ${data}`);\r\n\t\t\t}\r\n\t\t});\r\n\t});\r\n\ttokenReq.on(\"error\", (err: Error) => {\r\n\t\tconsole.error(\"Token request error:\", err);\r\n\t\tres.writeHead(500, { \"Content-Type\": \"text/plain\" });\r\n\t\tres.end(`Token request error: ${err.message}`);\r\n\t});\r\n\ttokenReq.write(postData);\r\n\ttokenReq.end();\r\n}\r\n\r\nasync function getHtmlTemplate(templateName: string): Promise<string> {\r\n  const templatePath = path.join(getFolderPath(\"../src/templates\"), templateName);\r\n  const html = await fs.promises.readFile(templatePath, \"utf8\");\r\n  return html;\r\n}\r\n\r\nfunction getOAuthAccessToken(): string | null {\r\n\treturn oauthAccessToken;\r\n}\r\n\r\nexport { startOAuthHandler, getOAuthAccessToken };\r\n","#!/usr/bin/env node\nimport { McpServer } from \"@modelcontextprotocol/sdk/server/mcp.js\";\r\nimport { StdioServerTransport } from \"@modelcontextprotocol/sdk/server/stdio.js\";\r\nimport fs from \"node:fs\";\r\nimport path from \"node:path\";\r\nimport { pathToFileURL } from 'node:url';\r\n\r\nimport { config } from \"./config.ts\";\r\n\r\nimport { authenticateVbrickAndScheduleRefresh, formatResponse, getFolderPath } from \"./vbrickUtilities.ts\";\r\nimport { startOAuthHandler, getOAuthAccessToken } from \"./server.ts\";\r\nimport open from \"open\";\r\n\r\nconst server = new McpServer({\r\n  name: \"rev-mcp-server\",\r\n  version: \"1.0.0\",\r\n});\r\n\r\nfunction registerAuthorizeTool() {\r\n  server.tool(\r\n    \"vbick_authorize\",\r\n    \"This tool will let the user get logged in. You will not get a confirmation until the user logs in, so wait for that.\",\r\n    {},\r\n    async function (_args, _extra) {\r\n      const loginUrl = `http://localhost:${config.oauth.port}/`;\r\n      console.warn(\"Pop open a browser window with the login link\");\r\n      open(loginUrl);\r\n\r\n      const maxWaitMs = 20000;\r\n      const pollIntervalMs = 1000;\r\n      let waited = 0;\r\n\r\n      while (!getOAuthAccessToken() && waited < maxWaitMs) {\r\n        await new Promise((resolve) => setTimeout(resolve, pollIntervalMs));\r\n        waited += pollIntervalMs;\r\n      }\r\n\r\n      if (getOAuthAccessToken()) {\r\n        return formatResponse(\"✅ Login successful!\", \"text\");\r\n      } else {\r\n        return formatResponse(\r\n          \"⏳ The login process is still pending. Use the who-am-i tool to keep checking if the login succeeded, or run the authorize tool again.\",\r\n          \"text\"\r\n        );\r\n      }\r\n    }\r\n  );\r\n}\r\n\r\nasync function registerTools() {\r\n  const toolsDir = getFolderPath(\"tools\");\r\n\r\n  const toolFiles = fs.readdirSync(toolsDir).filter(file => file.endsWith(\".ts\") || file.endsWith(\".js\"));\r\n\r\n  for (const file of toolFiles) {\r\n    const modulePath = path.join(toolsDir, file);\r\n    const toolModule = await import(pathToFileURL(modulePath).href);\r\n\r\n    for (const exportKey of Object.keys(toolModule)) {\r\n      const tool = toolModule[exportKey];\r\n      console.warn(`Registering tool: ${tool.name}`);\r\n      server.tool(tool.name, tool.description, tool.inputSchema, tool.handler);\r\n    }\r\n  }\r\n}\r\n\r\n// Start the server\r\nasync function main() {\r\n  if (config.oauth.enabled) {\r\n    await startOAuthHandler();\r\n    registerAuthorizeTool();\r\n  }\r\n\r\n  await authenticateVbrickAndScheduleRefresh();\r\n  await registerTools();\r\n\r\n  const transport = new StdioServerTransport();\r\n  await server.connect(transport);\r\n\r\n  console.warn(\"Rev MCP Server running on stdio\");\r\n  console.warn(`Tenant: ${config.vbrickRevTenantUrl}, OAuth: ${config.oauth.enabled ? \"enabled\" : \"disabled\"}`);\r\n}\r\n\r\nprocess.on(\"SIGINT\", () => {\r\n  console.warn('Received SIGINT. Exiting...');\r\n  process.exit(0);\r\n});\r\nprocess.on(\"SIGTERM\", () => {\r\n  console.warn('Received SIGTERM. Exiting...');\r\n  process.exit(0);\r\n});\r\n\r\nmain().catch((error) => {\r\n  console.error(\"Fatal error in main():\", error);\r\n  process.exit(1);\r\n});\r\n"],"mappings":"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"}